{"version":3,"sources":["DebouncedInput.js","randomUtils.js","plotChart.js","lineChart.js","areaChart.js","App.js","serviceWorker.js","index.js"],"names":["DebouncedInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputText","initialData","_timerID","_duration","handleKeyDown","bind","assertThisInitialized","handleBlur","_this2","clearTimeout","setTimeout","onChange","_this3","react_default","a","createElement","type","placeholder","value","onKeyDown","onBlur","event","setState","target","Component","colors","getRandomColor","getRandomNumberBetween","length","min","max","Math","floor","random","ceil","renderPlotChart","id","data","d3","require","select","concat","remove","screenWidth","document","documentElement","clientWidth","window","innerWidth","width","margin","n","xThreshold","yThreshold","dataPoints","noOfCoordinates","coordinates","iterator","push","getRandomCoordinates","xScale","scaleLinear","domain","range","yScale","xAxis","axisBottom","yAxis","axisLeft","plotChartSVG","append","attr","selectAll","enter","d","renderLineChart","getLinearCoordinates","line","x","y","lineChartSVG","index","renderAreaChart","noOfLayers","layerThreshold","prevLayerYCoords","Array","from","outerLoopCounter","tempLayer","innerLoopCounter","yCoord","shift","getStackedCoordinates","area","y0","y1","areaChartSVG","datum","_","i","App","options","selectedOption","handleOptionsChange","handleTextChange","renderCharts","option","addEventListener","prevState","defer","className","map","key","toLowerCase","checked","htmlFor","onClick","DebouncedInput_DebouncedInput","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3108f5f.chunk.js","sourcesContent":["import React, {\n    Component\n} from 'react';\n\n/**\n * This Input field Component calls onChange, if the user stops tying for a given amount of time.\n */\n\nexport default class DebouncedInput extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            inputText: props.initialData\n        }\n        \n        // Tracks the timer id\n        this._timerID = null;\n        // Duration to wait\n        this._duration = 750;\n\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n    }\n\n    handleKeyDown() {\n        clearTimeout(this._timerID);\n        this._timerID = setTimeout(() => {\n            this.props.onChange(this.state.inputText);\n        }, this._duration);\n    }\n\n    // If suddenly user presses tab or anything...\n    handleBlur(){\n        clearTimeout(this._timerID);\n        this.props.onChange(this.state.inputText);\n    }\n\n    render() {\n        return ( <\n            input type = \"text\"\n            placeholder = {\n                this.props.placeholder\n            }\n            value = {\n                this.state.inputText\n            }\n            onKeyDown = {\n                this.handleKeyDown\n            }\n            onBlur = {\n                this.handleBlur\n            }\n            onChange = {\n                (event) => this.setState({\n                    inputText: event.target.value\n                })\n            }\n            />\n        )\n    }\n}","/*\n    The only difference from Dan's demo and this app is that,\n    the input to the chart is random.\n*/\n\nconst colors = [\"#F4D03F\", \"#F4D03F\", \"#2980B9\", \"#D35400\", \"#7D3C98\", \"#1E8449\"];\n\n// Returns a random color from the above six\nfunction getRandomColor(){    \n    return colors[getRandomNumberBetween(0, colors.length)];\n}\n\n/**\n * \n * @param {Integer} min The minimum number from which you want to get random number (Inclusive)\n * @param {Integer} max The maximum number within which you want to get random number (Exclusive)\n * \n * @returns A random number within two given params\n */\nfunction getRandomNumberBetween(min, max){\n    return Math.floor(Math.random() * (Math.floor(max) - Math.ceil(min))) + Math.ceil(min);\n}\n\n/**\n * \n * @param {Integer} noOfCoordinates Specifies the number of coordinates needed\n * @param {Integer} xThreshold Specifies the maximum X-Axis value\n * @param {Integer} yThreshold Specifies the maximum Y-Axis value\n * \n * @returns An array of random coordinates  eg) [[x,y], ....]\n */\nfunction getRandomCoordinates(noOfCoordinates, xThreshold, yThreshold){\n    let coordinates = [];\n    for(let iterator = 0; iterator < noOfCoordinates; iterator++){\n        coordinates.push([getRandomNumberBetween(0 , xThreshold + 1) , getRandomNumberBetween(0, yThreshold + 1)]);\n    }\n    return coordinates;\n}\n\n/**\n * \n * @param {Integer} xThreshold Specifies the maximum X-Axis value\n * @param {Integer} yThreshold Specifies the maximum Y-Axis value\n * \n * @returns An array of random coordinates for each integer in x-axis\n */\nfunction getLinearCoordinates(xThreshold, yThreshold){\n    let coordinates = [];\n    for(let iterator = 1; iterator <= xThreshold; iterator++){\n        coordinates.push([iterator, getRandomNumberBetween(10, yThreshold + 1)]);\n    }\n    return coordinates;\n}\n\n/**\n * \n * @param {Integer} xThreshold Specifies the maximum X-Axis value\n * @param {Integer} yThreshold Specifies the maximum Y-Axis value\n * @param {Integer} noOfLayers specifies the number of layers\n * \n * @returns an array of random stacked area coordinates  eg) [[x1,y1,y0], ...]\n */\nfunction getStackedCoordinates(xThreshold, yThreshold, noOfLayers){\n    let coordinates = [];\n    const layerThreshold = Math.floor(yThreshold / noOfLayers);\n    let prevLayerYCoords = Array.from(new Array(xThreshold), () => 0);\n    for(let outerLoopCounter = 0; outerLoopCounter < noOfLayers; outerLoopCounter++){\n        let tempLayer = [];\n        for(let innerLoopCounter = 0; innerLoopCounter < xThreshold; innerLoopCounter++){\n            let yCoord = getRandomNumberBetween(prevLayerYCoords[0], (outerLoopCounter + 1) * layerThreshold);\n            prevLayerYCoords.push(yCoord);\n            tempLayer.push([innerLoopCounter, yCoord, prevLayerYCoords.shift()]);\n        }\n        coordinates.push(tempLayer);\n    }\n    return coordinates;\n}\n\nexport {\n    getRandomColor,\n    getRandomCoordinates,\n    getLinearCoordinates,\n    getStackedCoordinates,\n    colors\n}","import { getRandomColor, getRandomCoordinates } from './randomUtils'\n\n/**\n * \n * @param {string} id id of the HTML element, in which you want to present the chart\n * @param {string} data The inputText from the user\n */\n\nexport default function renderPlotChart(id, data){\n    const d3 = require('d3');\n\n    d3.select(`#${id}`).select('svg').remove();\n\n    const screenWidth = Math.min(document.documentElement.clientWidth, window.innerWidth || 0)\n    const width = screenWidth > 900 ? Math.ceil(screenWidth/2) - 10 : screenWidth;\n    const height = 350;\n\n    const margin = {\n        top: 20,\n        bottom: 20,\n        left: 20,\n        right: 20\n    }\n    \n    const n = 100 + ((data.length + 1) * 50);\n    const xThreshold = 250 + ((data.length % 5) * 5);\n    const yThreshold = 250 + ((data.length % 10) * 10);\n\n    let dataPoints = getRandomCoordinates(n, xThreshold, yThreshold);\n\n\n    const xScale = d3.scaleLinear()\n                    .domain([0, xThreshold])\n                    .range([margin.left + margin.right, width - margin.left - margin.right]);\n    const yScale = d3.scaleLinear()\n                    .domain([0, yThreshold])\n                    .range([height - margin.top - margin.bottom, margin.top]);\n\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale);\n\n    let plotChartSVG = d3.select(`#${id}`)\n                    .append(\"svg\")\n                    .attr(\"width\", width)\n                    .attr(\"height\", height);\n\n    plotChartSVG.append(\"g\")\n                .selectAll(\"circle\")\n                .data(dataPoints)\n                .enter()\n                .append(\"circle\")\n                .attr(\"cx\", d => xScale(d[0]))\n                .attr(\"cy\", d => yScale(d[1]))\n                .attr(\"r\", \"7\")\n                .attr(\"fill\",() => getRandomColor())\n                .attr(\"fill-opacity\", \"0.7\");\n\n    plotChartSVG.append(\"g\")\n            .attr(\"transform\", `translate(0, ${height - margin.top - margin.bottom})`)\n            .attr(\"class\", \"axis\")\n            .call(xAxis);\n\n    plotChartSVG.append(\"g\")\n            .attr(\"class\", \"axis\")\n            .attr(\"transform\", `translate(${margin.left + margin.right} , 0)`)\n            .call(yAxis);\n}","import { getRandomColor, getLinearCoordinates } from './randomUtils';\n/**\n * \n * @param {string} id id of the HTML element, in which you want to present the chart\n * @param {string} data The inputText from the user\n */\n\nexport default function renderLineChart(id, data){\n    const d3 = require('d3');\n\n    d3.select(`#${id}`).select('svg').remove();\n\n    const screenWidth = Math.min(document.documentElement.clientWidth, window.innerWidth || 0)\n    const width = screenWidth > 900 ? Math.ceil(screenWidth/2) - 10 : screenWidth;\n    const height = 350;\n\n    const margin = {\n        top: 20,\n        bottom: 20,\n        left: 20,\n        right: 20\n    }\n    \n    const xThreshold = 250 + ((data.length % 5) * 5);\n    const yThreshold = 250 + ((data.length % 10) * 10);\n\n    let dataPoints = getLinearCoordinates(xThreshold, yThreshold);\n\n\n    const xScale = d3.scaleLinear()\n                    .domain([0, xThreshold])\n                    .range([margin.left + margin.right, width - margin.left - margin.right]);\n    const yScale = d3.scaleLinear()\n                    .domain([0, yThreshold])\n                    .range([height - margin.top - margin.bottom, margin.top]);\n\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale);\n\n    const line = d3.line()\n                    .x(d => xScale(d[0]))\n                    .y(d => yScale(d[1]))\n\n    let lineChartSVG = d3.select(`#${id}`)\n                    .append(\"svg\")\n                    .attr(\"width\", width)\n                    .attr(\"height\", height);\n    \n    lineChartSVG.selectAll(\"g\")\n                .data(dataPoints)\n                .enter()\n                .append(\"g:path\")\n                .attr(\"d\", (d, index) => line([[index + 1, 0], d]))\n                .attr(\"stroke\", () => getRandomColor())\n                .attr(\"stroke-width\", 1)\n                .attr(\"fill\", \"none\");\n\n    lineChartSVG.append(\"g\")\n                .attr(\"transform\", `translate(0, ${height - margin.top - margin.bottom})`)\n                .attr(\"class\", \"axis\")\n                .call(xAxis);\n    lineChartSVG.append(\"g\")\n                .attr(\"transform\", `translate(${margin.left + margin.right} , 0)`)\n                .attr(\"class\", \"axis\")\n                .call(yAxis);\n}","import { getStackedCoordinates, colors } from './randomUtils';\n\n/**\n * \n * @param {string} id id of the HTML element, in which you want to present the chart\n * @param {string} data The inputText from the user\n */\n\nexport default function renderAreaChart(id, data){\n    const d3 = require('d3');\n\n    d3.select(`#${id}`).select('svg').remove();\n\n    const width = Math.min(document.documentElement.clientWidth, window.innerWidth || 0)\n    const height = 320;\n\n    const margin = {\n        top: 20,\n        bottom: 20,\n        left: 20,\n        right: 20\n    }\n    \n    const xThreshold = 250 + ((data.length % 5) * 5);\n    const yThreshold = 250 + ((data.length % 10) * 10);\n    const numberOfLayers = 6;\n\n    let dataPoints = getStackedCoordinates(xThreshold, yThreshold, numberOfLayers);\n\n    const xScale = d3.scaleLinear()\n                    .domain([0, xThreshold])\n                    .range([margin.left + margin.right, width - margin.left - margin.right]);\n    const yScale = d3.scaleLinear()\n                    .domain([0, yThreshold])\n                    .range([height - margin.top - margin.bottom, margin.top]);\n\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale);\n\n    const area = d3.area()\n                    .x(d => xScale(d[0]))\n                    .y0(d => yScale(d[1]))\n                    .y1(d => yScale(d[2]));\n\n    let areaChartSVG = d3.select(`#${id}`)\n                    .append(\"svg\")\n                    .attr(\"width\", width)\n                    .attr(\"height\", height);\n\n    areaChartSVG.append(\"g\")\n                .selectAll(\"path\")\n                .data(dataPoints)\n                .enter()\n                .append(\"path\")\n                .datum(d => d)\n                .attr(\"fill\", (_, i) => colors[i])\n                .attr(\"d\", area);\n\n    areaChartSVG.append(\"g\")\n                .attr(\"transform\", `translate(0, ${height - margin.top - margin.bottom})`)\n                .attr(\"class\", \"axis\")\n                .call(xAxis);\n    areaChartSVG.append(\"g\")\n                .attr(\"transform\", `translate(${margin.left + margin.right} , 0)`)\n                .attr(\"class\", \"axis\")\n                .call(yAxis);\n}","import React, { Component } from 'react';\n// It is an unstable module, don't use in production use cases\nimport {unstable_scheduleCallback as defer} from 'scheduler';\nimport './App.css';\nimport DebouncedInput from './DebouncedInput';\nimport renderPlotChart from './plotChart';\nimport renderLineChart from './lineChart';\nimport renderAreaChart from './areaChart';\n\nclass App extends Component {\n  \n  constructor(props){\n    super(props)\n    this.state = {\n      inputText: '',\n      options: ['Synchronous', 'Debounced', 'Asynchronous'],\n      selectedOption: 'Synchronous'\n    }\n\n    this.handleOptionsChange = this.handleOptionsChange.bind(this);\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.renderCharts = this.renderCharts.bind(this);\n  }\n\n  handleTextChange(event){\n    this.setState({\n      inputText: event.target.value\n    })\n  }\n\n  /**\n   * \n   * @param {string} option used to specify selected option Synchronous|Debounced|Asynchronous\n   */\n  handleOptionsChange(option){\n    this.setState({\n      selectedOption: option\n    })\n  }\n\n  componentDidMount(){\n    window.addEventListener(\"resize\",this.renderCharts);\n    this.renderCharts();\n  }\n\n  /**\n   * Renders\n   * Simple (x,y) chart to the left\n   * Line chart to right\n   * Area chart to bottom\n   */\n  renderCharts(){\n    renderPlotChart(\"leftChart\", this.state.inputText);\n    renderLineChart(\"rightChart\", this.state.inputText);\n    renderAreaChart(\"bottomChart\", this.state.inputText);\n  }\n\n  componentDidUpdate(_, prevState){\n    if(prevState.inputText !== this.state.inputText){\n      // If the option is asynchronous, make rendering asynchronous.\n      if(this.state.selectedOption === \"Asynchronous\")\n        defer(this.renderCharts);\n      else\n        this.renderCharts();\n    }\n  }\n  \n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"options\">\n          {\n            this.state.options.map(option => {\n              return (\n                <span key={option}>\n                  <input type=\"radio\"\n                        id={option.toLowerCase()}\n                        value={option}\n                        checked={this.state.selectedOption === option}\n                        onChange={() => this.handleOptionsChange(option)}\n                  />\n                  <label htmlFor={option.toLowerCase()} onClick={() => this.handleOptionsChange(option)}>{option}</label>\n                </span>\n              )\n            })\n          }\n        </div>\n        <div className=\"text-field\">\n        {\n          this.state.selectedOption === \"Debounced\" ? (\n            <DebouncedInput \n                placeholder=\"Your text here\"\n                initialData={this.state.inputText} \n                onChange={(inputText) => this.setState({ inputText })}/>\n          ):(\n            <input type=\"text\" \n            placeholder=\"Your text here\"\n            value={this.state.inputText}\n            onChange={this.handleTextChange} />\n          )\n        }\n        </div>\n        <div className=\"charts\">\n        \n          <div className=\"charts-top\">\n\n            <div className=\"charts-top-left\" id=\"leftChart\"></div>\n            <div className=\"charts-top-right\" id=\"rightChart\"></div>\n\n          </div>\n          \n          <div className=\"charts-bottom\" id=\"bottomChart\"></div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}